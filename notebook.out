\BOOKMARK [1][-]{section.1}{Data Structures}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{Ordered set PDBS}{section.1}% 2
\BOOKMARK [2][-]{subsection.1.2}{Rope}{section.1}% 3
\BOOKMARK [2][-]{subsection.1.3}{Unordered Map Pair Hash Function}{section.1}% 4
\BOOKMARK [2][-]{subsection.1.4}{RMQ Sparse Table 2D}{section.1}% 5
\BOOKMARK [2][-]{subsection.1.5}{Disjoint Set Union}{section.1}% 6
\BOOKMARK [2][-]{subsection.1.6}{RMQ Using Sparse Table}{section.1}% 7
\BOOKMARK [2][-]{subsection.1.7}{Segment Tree On Euler Path}{section.1}% 8
\BOOKMARK [2][-]{subsection.1.8}{Segment Tree Range Update GSS}{section.1}% 9
\BOOKMARK [2][-]{subsection.1.9}{LCA functions}{section.1}% 10
\BOOKMARK [2][-]{subsection.1.10}{Heavy Light Decomposition}{section.1}% 11
\BOOKMARK [2][-]{subsection.1.11}{Heavy Light Decomposition Adamant Implementation}{section.1}% 12
\BOOKMARK [2][-]{subsection.1.12}{MoAlgorithms Usage}{section.1}% 13
\BOOKMARK [1][-]{section.2}{Dynamic Programming}{}% 14
\BOOKMARK [2][-]{subsection.2.1}{Convex Hull}{section.2}% 15
\BOOKMARK [2][-]{subsection.2.2}{Convex Hull 2}{section.2}% 16
\BOOKMARK [2][-]{subsection.2.3}{Divide And Conquer}{section.2}% 17
\BOOKMARK [2][-]{subsection.2.4}{Dynamic Hull}{section.2}% 18
\BOOKMARK [2][-]{subsection.2.5}{Knuth Optimizations}{section.2}% 19
\BOOKMARK [2][-]{subsection.2.6}{Longest Increasing Subseqence}{section.2}% 20
\BOOKMARK [1][-]{section.3}{Geometry}{}% 21
\BOOKMARK [2][-]{subsection.3.1}{Geometry template 2d}{section.3}% 22
\BOOKMARK [2][-]{subsection.3.2}{Geometry Template Rezaul bhai}{section.3}% 23
\BOOKMARK [2][-]{subsection.3.3}{Checks if rectangle of sides x,y fits inside one of sides X,Y}{section.3}% 24
\BOOKMARK [2][-]{subsection.3.4}{Smallest circle enclosing given points}{section.3}% 25
\BOOKMARK [2][-]{subsection.3.5}{Soddy Circles}{section.3}% 26
\BOOKMARK [2][-]{subsection.3.6}{Spherical Co Ordinates}{section.3}% 27
\BOOKMARK [2][-]{subsection.3.7}{Voronoi diagrams and Convex hull}{section.3}% 28
\BOOKMARK [2][-]{subsection.3.8}{Usage-1}{section.3}% 29
\BOOKMARK [1][-]{section.4}{Graph - DfsTree}{}% 30
\BOOKMARK [2][-]{subsection.4.1}{Biconnected Component}{section.4}% 31
\BOOKMARK [2][-]{subsection.4.2}{Biconnected Component Check}{section.4}% 32
\BOOKMARK [2][-]{subsection.4.3}{Articulation Bridge/Points}{section.4}% 33
\BOOKMARK [2][-]{subsection.4.4}{Articulation Bridge/Points Check}{section.4}% 34
\BOOKMARK [2][-]{subsection.4.5}{SCC}{section.4}% 35
\BOOKMARK [2][-]{subsection.4.6}{SCC Check}{section.4}% 36
\BOOKMARK [1][-]{section.5}{Graph - Matching}{}% 37
\BOOKMARK [2][-]{subsection.5.1}{FastMatching}{section.5}% 38
\BOOKMARK [2][-]{subsection.5.2}{General Matching}{section.5}% 39
\BOOKMARK [2][-]{subsection.5.3}{Min cost matching}{section.5}% 40
\BOOKMARK [2][-]{subsection.5.4}{Mtaching}{section.5}% 41
\BOOKMARK [2][-]{subsection.5.5}{Perfect Matching Min Cost Hungarian Assignment}{section.5}% 42
\BOOKMARK [2][-]{subsection.5.6}{Stable Marriage}{section.5}% 43
\BOOKMARK [1][-]{section.6}{Graph - Max Flow}{}% 44
\BOOKMARK [2][-]{subsection.6.1}{Min Cut Between Every Pair Of Vertices}{section.6}% 45
\BOOKMARK [2][-]{subsection.6.2}{Max Closure}{section.6}% 46
\BOOKMARK [2][-]{subsection.6.3}{Dinic}{section.6}% 47
\BOOKMARK [2][-]{subsection.6.4}{MaxFlow Trace}{section.6}% 48
\BOOKMARK [2][-]{subsection.6.5}{MaxFlow PushRelabel}{section.6}% 49
\BOOKMARK [2][-]{subsection.6.6}{Min Cost Max Flow PushRelabel}{section.6}% 50
\BOOKMARK [2][-]{subsection.6.7}{Min Cost Max Flow Shortest Path Faster Algorithm}{section.6}% 51
\BOOKMARK [2][-]{subsection.6.8}{Minimum Cut}{section.6}% 52
\BOOKMARK [2][-]{subsection.6.9}{Misc?}{section.6}% 53
\BOOKMARK [1][-]{section.7}{Graph- MST}{}% 54
\BOOKMARK [2][-]{subsection.7.1}{Directed MST}{section.7}% 55
\BOOKMARK [1][-]{section.8}{Graph- Misc}{}% 56
\BOOKMARK [2][-]{subsection.8.1}{2SAT}{section.8}% 57
\BOOKMARK [2][-]{subsection.8.2}{Euler Path}{section.8}% 58
\BOOKMARK [2][-]{subsection.8.3}{Euler Path Check}{section.8}% 59
\BOOKMARK [2][-]{subsection.8.4}{Max Clique}{section.8}% 60
\BOOKMARK [1][-]{section.9}{JAVA}{}% 61
\BOOKMARK [2][-]{subsection.9.1}{BigMath}{section.9}% 62
\BOOKMARK [2][-]{subsection.9.2}{IO}{section.9}% 63
\BOOKMARK [2][-]{subsection.9.3}{Regex Test}{section.9}% 64
\BOOKMARK [1][-]{section.10}{Math - Linear}{}% 65
\BOOKMARK [2][-]{subsection.10.1}{Gaussian Jordan Elimination}{section.10}% 66
\BOOKMARK [2][-]{subsection.10.2}{Gaussian Binary}{section.10}% 67
\BOOKMARK [2][-]{subsection.10.3}{Matrix Class Java}{section.10}% 68
\BOOKMARK [1][-]{section.11}{Math - NumberThoery}{}% 69
\BOOKMARK [2][-]{subsection.11.1}{Find any Prime Factor of n}{section.11}% 70
\BOOKMARK [2][-]{subsection.11.2}{Find any Prime Factor of n check}{section.11}% 71
\BOOKMARK [2][-]{subsection.11.3}{sum\(aixi\)=b\(mod m\)}{section.11}% 72
\BOOKMARK [2][-]{subsection.11.4}{Factorial Mod}{section.11}% 73
\BOOKMARK [2][-]{subsection.11.5}{Primitive Root}{section.11}% 74
\BOOKMARK [2][-]{subsection.11.6}{Sqrt Mod}{section.11}% 75
\BOOKMARK [2][-]{subsection.11.7}{Number theory \(modular, Chinese remainder, linear Diophantine\)}{section.11}% 76
\BOOKMARK [2][-]{subsection.11.8}{Details in Code}{section.11}% 77
\BOOKMARK [1][-]{section.12}{Math - Prime}{}% 78
\BOOKMARK [2][-]{subsection.12.1}{EulerPhi}{section.12}% 79
\BOOKMARK [2][-]{subsection.12.2}{Sieve}{section.12}% 80
\BOOKMARK [2][-]{subsection.12.3}{PollardRho}{section.12}% 81
\BOOKMARK [2][-]{subsection.12.4}{RabinMiller Prime Test}{section.12}% 82
\BOOKMARK [2][-]{subsection.12.5}{Segmented Sieve}{section.12}% 83
\BOOKMARK [1][-]{section.13}{Math - Pure}{}% 84
\BOOKMARK [2][-]{subsection.13.1}{Fibonacci Check}{section.13}% 85
\BOOKMARK [2][-]{subsection.13.2}{Bernoulli Numbers and Faulhaber's Formula}{section.13}% 86
\BOOKMARK [2][-]{subsection.13.3}{Moebius}{section.13}% 87
\BOOKMARK [2][-]{subsection.13.4}{N Gonal}{section.13}% 88
\BOOKMARK [2][-]{subsection.13.5}{Pell Equation}{section.13}% 89
\BOOKMARK [2][-]{subsection.13.6}{Generate All Primitive Triplets}{section.13}% 90
\BOOKMARK [2][-]{subsection.13.7}{Sum div Sum mod}{section.13}% 91
\BOOKMARK [2][-]{subsection.13.8}{Matrix Cpp Class}{section.13}% 92
\BOOKMARK [2][-]{subsection.13.9}{Lehmer Pi}{section.13}% 93
\BOOKMARK [2][-]{subsection.13.10}{Knight's Shortest Path}{section.13}% 94
\BOOKMARK [1][-]{section.14}{String}{}% 95
\BOOKMARK [2][-]{subsection.14.1}{Hash}{section.14}% 96
\BOOKMARK [2][-]{subsection.14.2}{SuffixArray}{section.14}% 97
\BOOKMARK [2][-]{subsection.14.3}{SuffixArray Check}{section.14}% 98
\BOOKMARK [2][-]{subsection.14.4}{KMP}{section.14}% 99
\BOOKMARK [2][-]{subsection.14.5}{Palindromic Tree}{section.14}% 100
\BOOKMARK [2][-]{subsection.14.6}{AhoCorasick}{section.14}% 101
\BOOKMARK [2][-]{subsection.14.7}{Find duplicate strings twice a time}{section.14}% 102
\BOOKMARK [2][-]{subsection.14.8}{Suffix Automata}{section.14}% 103
\BOOKMARK [2][-]{subsection.14.9}{Manacher}{section.14}% 104
\BOOKMARK [2][-]{subsection.14.10}{Z algorithm}{section.14}% 105
\BOOKMARK [2][-]{subsection.14.11}{Z Algorithm Check}{section.14}% 106
\BOOKMARK [1][-]{section.15}{MISC}{}% 107
\BOOKMARK [2][-]{subsection.15.1}{Kth Permutation}{section.15}% 108
\BOOKMARK [2][-]{subsection.15.2}{Next Palindrome}{section.15}% 109
\BOOKMARK [2][-]{subsection.15.3}{Date Cpp}{section.15}% 110
\BOOKMARK [2][-]{subsection.15.4}{Date Java}{section.15}% 111
\BOOKMARK [2][-]{subsection.15.5}{Template}{section.15}% 112
